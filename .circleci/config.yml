version: 2.1

commands:
  destroy-environment: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string" 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      workflow_id:
        type: "string"     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/PgKoNZ8P5pwbtT7izQRiU1/migration_${CIRCLE_WORKFLOW_ID:0:7})
            #SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
               cd ~/project/backend
               npm install
               npm run migration:revert
            #  Add revert code here. You can find this in the Getting Started section.
            
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
          - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-test
          command: |
            cd frontend
            npm install
            npm run test
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
           
  test-backend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-test
          command: |
            cd backend
            npm install
            npm run test
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
    - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
    - checkout
      # Restore from cache
    - restore_cache:
        keys: [frontend-build]
    - run:
      # Your job code here
        name: scan-frontend
        command: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
    - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # Your job code here
    

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-backend]
          
      # Your job code here
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend 
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      # install Dependencies
      - run: yum install -y tar 
      - run: yum install -y gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-tag \
              --stack-name "Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-tag \
              --stack-name "Udapeople--${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
             export backend_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=ebackend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt)
              cat ./.circleci/ansible/inventory.txt
      - run:
          name: Add .env vars to backend distro
          command: |
            echo ENVIRONMENT=development > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"
      - restore_cache:
          keys: [backend-build]          
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - backend/
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["62:da:f7:52:a2:f1:12:31:43:eb:2b:9e:75:ef:24:38"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            pwd            
            cd .circleci/ansible
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt)  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # - attach_workspace:
      #     at: ~/project
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Run migrations
          no_output_timeout: 7m
          command: |
            # Your code here
            
            # pwd
            # ls
            # #cd backend && npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
            # cd backend
            # cat .env
            # npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
            # cat migrations-${CIRCLE_WORKFLOW_ID}.txt
            cd backend
            npm install
            npm run migrations > migrations.txt
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            cd backend
            if grep -q "success" ~/project/backend/migrations.txt
            then
              # curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              # --request PUT \
              # --data '1' \
              # https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
              curl --insecure https://kvdb.io/PgKoNZ8P5pwbtT7izQRiU1/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            # else
            #   # curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
            #   # --request PUT \
            #   # --data '0' \
            #   # https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            #   curl https://kvdb.io/PgKoNZ8P5pwbtT7izQRiU1/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'

            fi
            # echo Key: migrations-${CIRCLE_WORKFLOW_ID:0:7}  
            # exit 1
     # Here's where you will add some code to rollback on failure 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
      
      
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash - #
            yum -y install nodejs
            yum -y install tar gzipi
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
            
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            npm install webpack-dev-server -g
            cd frontend
            npm install chokidar
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
       - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["62:da:f7:52:a2:f1:12:31:43:eb:2b:9e:75:ef:24:38"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
            apk add --update ansible rsync 
            apk add curl
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            # your code here
            pwd            
            cd .circleci/ansible
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt)
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
  
    docker:
      # Lightweight Docker image
        - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --no-cache \
              curl \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 --region us-east-1 describe-instances \
                  --filters Name=instance-state-name,Values=running Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
              echo "Backend IP: ${BACKEND_IP}"      
            #new code for smoke test.
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
                return 1
            fi
            # # your code here
            # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            # if curl -s ${URL} | grep "Welcome"
            # then
            #   return 0
            # else
            #   return 1
            # fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
 
            if curl -s ${URL} | grep "Welcome"
            then

              return 0
            else
            return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
              export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              
              # curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              #   --request PUT --data "${OLD_WORKFLOW_ID}" \
              #   https://api.memstash.io/values/workflow_id
              
              echo Old Workflow Id: ${OLD_WORKFLOW_ID}
              echo Actual Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}
              echo Stacks available: ${STACKS[@]}
              
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name production-distro \
                --region us-east-1\
                --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags project=udapeople
          
      - revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # # your code here
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            # export OldWorkflowID="the id here"
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # export STACKS=[] #put the list of stacks here
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
            echo Deleting stack
              # your code here
              #aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
            echo cannot clean up
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
           requires: [build-backend]
      - scan-frontend:
           requires: [build-frontend]
      - deploy-infrastructure:

          filters:
            branches:
             only: 
               - master
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
              
      - configure-infrastructure:
           requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      - smoke-test:
           requires: [deploy-backend, deploy-frontend]
      
      - cloudfront-update:
           requires: [smoke-test]
      - cleanup:
           requires: [cloudfront-update]